// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.3
// source: review/v1/review.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReviewAddReplyReview = "/api.review.v1.Review/AddReplyReview"
const OperationReviewCreateReview = "/api.review.v1.Review/CreateReview"
const OperationReviewDeleteReview = "/api.review.v1.Review/DeleteReview"
const OperationReviewGetReview = "/api.review.v1.Review/GetReview"
const OperationReviewListReviewByUid = "/api.review.v1.Review/ListReviewByUid"
const OperationReviewUpdateReview = "/api.review.v1.Review/UpdateReview"

type ReviewHTTPServer interface {
	// AddReplyReview B 端商家回复评价
	AddReplyReview(context.Context, *AddReplyReviewRequest) (*AddReplyReviewReply, error)
	// CreateReview 创建评价
	CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewReply, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewReply, error)
	GetReview(context.Context, *GetReviewRequest) (*GetReviewReply, error)
	ListReviewByUid(context.Context, *ListReviewByUidRequest) (*ListReviewByUidReply, error)
	UpdateReview(context.Context, *UpdateReviewRequest) (*UpdateReviewReply, error)
}

func RegisterReviewHTTPServer(s *http.Server, srv ReviewHTTPServer) {
	r := s.Route("/")
	r.POST("v1/review", _Review_CreateReview0_HTTP_Handler(srv))
	r.PATCH("v1/review/{reviewID}", _Review_UpdateReview0_HTTP_Handler(srv))
	r.DELETE("v1/review", _Review_DeleteReview0_HTTP_Handler(srv))
	r.GET("v1/review", _Review_GetReview0_HTTP_Handler(srv))
	r.GET("/v1/review/users/{userID}", _Review_ListReviewByUid0_HTTP_Handler(srv))
	r.POST("v1/review/reply", _Review_AddReplyReview0_HTTP_Handler(srv))
}

func _Review_CreateReview0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateReviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewCreateReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateReview(ctx, req.(*CreateReviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReviewReply)
		return ctx.Result(200, reply)
	}
}

func _Review_UpdateReview0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateReviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewUpdateReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateReview(ctx, req.(*UpdateReviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateReviewReply)
		return ctx.Result(200, reply)
	}
}

func _Review_DeleteReview0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteReviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewDeleteReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteReview(ctx, req.(*DeleteReviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReviewReply)
		return ctx.Result(200, reply)
	}
}

func _Review_GetReview0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetReviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewGetReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetReview(ctx, req.(*GetReviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReviewReply)
		return ctx.Result(200, reply)
	}
}

func _Review_ListReviewByUid0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListReviewByUidRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewListReviewByUid)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReviewByUid(ctx, req.(*ListReviewByUidRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReviewByUidReply)
		return ctx.Result(200, reply)
	}
}

func _Review_AddReplyReview0_HTTP_Handler(srv ReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddReplyReviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReviewAddReplyReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddReplyReview(ctx, req.(*AddReplyReviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddReplyReviewReply)
		return ctx.Result(200, reply)
	}
}

type ReviewHTTPClient interface {
	AddReplyReview(ctx context.Context, req *AddReplyReviewRequest, opts ...http.CallOption) (rsp *AddReplyReviewReply, err error)
	CreateReview(ctx context.Context, req *CreateReviewRequest, opts ...http.CallOption) (rsp *CreateReviewReply, err error)
	DeleteReview(ctx context.Context, req *DeleteReviewRequest, opts ...http.CallOption) (rsp *DeleteReviewReply, err error)
	GetReview(ctx context.Context, req *GetReviewRequest, opts ...http.CallOption) (rsp *GetReviewReply, err error)
	ListReviewByUid(ctx context.Context, req *ListReviewByUidRequest, opts ...http.CallOption) (rsp *ListReviewByUidReply, err error)
	UpdateReview(ctx context.Context, req *UpdateReviewRequest, opts ...http.CallOption) (rsp *UpdateReviewReply, err error)
}

type ReviewHTTPClientImpl struct {
	cc *http.Client
}

func NewReviewHTTPClient(client *http.Client) ReviewHTTPClient {
	return &ReviewHTTPClientImpl{client}
}

func (c *ReviewHTTPClientImpl) AddReplyReview(ctx context.Context, in *AddReplyReviewRequest, opts ...http.CallOption) (*AddReplyReviewReply, error) {
	var out AddReplyReviewReply
	pattern := "v1/review/reply"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReviewAddReplyReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReviewHTTPClientImpl) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...http.CallOption) (*CreateReviewReply, error) {
	var out CreateReviewReply
	pattern := "v1/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReviewCreateReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReviewHTTPClientImpl) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...http.CallOption) (*DeleteReviewReply, error) {
	var out DeleteReviewReply
	pattern := "v1/review"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReviewDeleteReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReviewHTTPClientImpl) GetReview(ctx context.Context, in *GetReviewRequest, opts ...http.CallOption) (*GetReviewReply, error) {
	var out GetReviewReply
	pattern := "v1/review"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReviewGetReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReviewHTTPClientImpl) ListReviewByUid(ctx context.Context, in *ListReviewByUidRequest, opts ...http.CallOption) (*ListReviewByUidReply, error) {
	var out ListReviewByUidReply
	pattern := "/v1/review/users/{userID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReviewListReviewByUid))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ReviewHTTPClientImpl) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...http.CallOption) (*UpdateReviewReply, error) {
	var out UpdateReviewReply
	pattern := "v1/review/{reviewID}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReviewUpdateReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
